/// \file
/// \brief Функции для работы с файлом с записями фиксированной длины
/// \details Функции для работы с файлом с записями фиксированной длины.

#ifndef RECORDFILE_H
#define RECORDFILE_H

#include <stdlib.h>

#include "Meta.h"

/// Открывает файл с записями.
///
/// \param path Путь до файла.
/// \return Файловый дескриптор в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int OpenRecordFile(char* path);

/// Закрывает файл с записями.
///
/// \param fd Файловый дескриптор.
/// \return Неотрицательное значение в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int CloseRecordFile(int fd);

/// Создаёт и открывает файл если он не существует или очищает и открывает
/// файл если существует.
///
/// \param path Путь до файла.
/// \param recordSize Размер записи.
/// \return Файловый дескриптор в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int CreateOrTruncateRecordFile(char* path, int recordSize);

/// Открывает файл если существует или создаёт и открывает файл если не
/// существует.
///
/// \param path Путь до файла.
/// \param recordSize Размера записи.
/// \return Файловый дескриптор в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int OpenOrCreateRecordFile(char* path, int recordSize);

/// Проверяет, существует ли файл, а так же доступен ли он для чтения и
/// записи.
///
/// \param path Путь до файла.
/// \return Истина если файл существует, доступен для записи и чтения,
/// ложь если или не существует, или не доступен для записи, или
/// не доступен для чтения.
bool IsExistWritableReadableRecordFile(char* path);

/// Перемещает текущую позицию в файле на позицию записи с заданным индексом.
/// Если индекс равен META_INDEX (-1), позиция перемещается в начало файла
/// на позицию метаинформации. В этом случае pMeta может быть NULL.
///
/// \param fd Файловый дескриптор.
/// \param pMeta Указатель на метаинформации.
/// \param index Индекс записи.
/// \return Неотрицателное значение в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int SeekRecord(int fd, Meta* pMeta, int index);

/// Записывает запись в файл с записями.
///
/// \param fd Файловый дескриптор.
/// \param pMeta Указатель на метаинформацию.
/// \param pRecord Указатель на запись.
/// \param index Индекс записи в файле.
/// \return Неотрицателное значение в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int WriteRecord(int fd, Meta* pMeta, void* pRecord, int index);

/// Считывает запись из файла с записями.
///
/// \param fd Файловый дескриптор.
/// \param pMeta Указатель на метаинформацию.
/// \param pRecord Указатель на запись.
/// \param index Индекс записи в файле.
/// \return Неотрицателное значение в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int ReadRecord(int fd, Meta* pMeta, void* pRecord, int index);

/// Добавляет запись в файл с записями.
///
/// \param fd Файловый дескриптор.
/// \param pMeta Указатель на метаинформацию.
/// \param pRecord Указатель на запись.
/// \return Неотрицателное значение в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int AddRecord(int fd, Meta* pMeta, void* pRecord);

/// Записывает метаинформацию в файл.
///
/// \param fd Файловый дескриптор.
/// \param pMeta Указатель на метаинформацию.
/// \return Неотрицателное значение в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int WriteMeta(int fd, Meta* pMeta);

/// Считывает метаинформацию из файла.
///
/// \param fd Файловый дескриптор.
/// \param pMeta Указатель на метаинформацию.
/// \return Неотрицателное значение в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int ReadMeta(int fd, Meta* pMeta);

/// Обрезает файл для вмещения указанного кол-ва записей.
///
/// \param fd Файловый дескриптор.
/// \param pMeta Указатель на метаинформацию.
/// \param n Сколько записей вместит файл после обрезания.
/// \return Неотрицательное значение в случае успеха, FILE_UNSUCCESSFUL
/// если заданное кол-во больше текущего кол-ва записей или другая ошибка.
int ChangeSizeRecordFile(int fd, Meta* pMeta, int n);

/// Удаляет запись с заданным индексом, помещяя последнюю запись вместо
/// удаляемой.
///
/// \param fd Файловый дескриптор.
/// \param pMeta Указатель на метаинформацию.
/// \param index Индекс удаляемой записи.
/// \return Неотрицательное значение в случае успеха, значение
/// из RecordFile.h в случае другой ошибки.
int RemoveRecordSwapWithLast(int fd, Meta* pMeta, int index);

/// Удаляет запись с заданным индексом, перемещяя записи после неё вместо неё
/// (смещая на одну позицию).
///
/// \param fd Файловый дескриптор.
/// \param pMeta Указатель на метаинформацию.
/// \param index Индекс удаляемой записи.
/// \return Неотрицательное значение в случае успеха, значение
/// из RecordFile.h в случае другой ошибки.
int RemoveRecordShift(int fd, Meta* pMeta, int index);

/// Считывает заданное кол-во записей из файла начиная с записи с заданным
/// индексом помещая их последовательно в массив.
///
/// \param fd Файловый дескриптор.
/// \param pMeta Указатель на метаинформацию.
/// \param pRecords Указатель на массив записей (или на буфер,
/// в который следует считать записи).
/// \param index Индекс записи с которой надо начать чтение.
/// \param count Кол-во считываемых записей.
/// \return Неотрицательное значение в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int ReadRecords(int fd, Meta* pMeta, void* pRecords, int index, int count);

/// Записывает заданное кол-во записей в файл начиная с записи с заданным
/// индексом помещённых последовательно в массив.
///
/// \param fd Файловый дескриптор.
/// \param pMeta Указатель на метаинформацию.
/// \param pRecords Указатель на массив записей (или на буфер,
/// из которого следует считать записи).
/// \param index Индекс записи в которую надо начать чтение.
/// \param count Кол-во записываемых записей.
/// \return Неотрицательное значение в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int WriteRecords(int fd, Meta* pMeta, void* pRecords, int index, int count);

/// Удаляет файл с записями.
///
/// \param path Путь до файла
/// \return Неотрицательное значение в случае успеха, FILE_UNSUCCESSFUL
/// в случае неудачи.
int DeleteRecordFile(char* path);

/// Проверяет файл на соответствие версии файла, размеров записей итд.
///
/// \param fd Файловый дескриптор.
/// \param recordSize Размер записи.
/// \return Неотрицательное число если файл верный, FILE_UNSUCCESSFUL если
/// ошибка чтения, BAD_META если неправильный формат файла.
int CheckRecordFile(int fd, int recordSize);

#endif //RECORDFILE_H
