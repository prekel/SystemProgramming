/// \file
/// \brief Прочие функции и макросы
/// \details Функции и макросы для ввода итд...

#ifndef UTILS_H
#define UTILS_H

#include <stdbool.h>

/// Вспомогательный макрос для STRINGIZE(s).
///
/// \param s Оборачиваемое макроопределение.
#define STRINGIZE_NX(s) #s

/// Оборачивает макроопределение s в кавычки.
///
/// \param s Оборачиваемое макроопределение.
#define STRINGIZE(s) STRINGIZE_NX(s)

/// Считывает строку до передода строки в динамическую строку. Требуется
/// очистка с помощью free(). Срабатывает assert(), если stepSize меньше 2, в
/// случае ошибки алокации или считывания.
///
/// \param stepSize Шаг, с которым считывается строка. Должен быть не менее 2.
/// Рекомендуется 10.
/// \param isFinalReallocRequired Требуется ли уменьшать выделенную память до
/// размера считанной строки. Иначе выделенная память будет кратна stepSize.
/// \return Указатель на считанную строку.
char* InputLineRealloc(int stepSize, bool isFinalReallocRequired);

/// Считывает строку до перевода строки. Срабатывает assert(), в случае
/// ошибки считывания.
///
/// \param stringToInput Указатель на считываемую строку.
/// \param maxStringLength Размер максимально возможной для использования
/// памяти через указатель.
/// \return Неотрицательное число в случае успеха - длина считанной строки,
/// -1 если строка не влезла в maxStringLength.
int InputLine(char* stringToInput, int maxStringLength);

/// Выводит выходную фразу и считывает целое число. Если из считанной
/// строки не получается получить число, или оно не удолетворяет условию
/// чекера pChecker, то число считывается занаво. Срабатывает assert(),
/// если maxIntLength меньше 3, в случае ошибки аллокации или считывания.
///
/// \param maxIntLength Максимальная длина считываемого числа.
/// \param pChecker Указател на функцию-чекер. Если равен NULL, проверка через
/// чекер не проводится.
/// \param formatToOutput Строка для вывода перед вводом.
/// \param ... Параметры для вывода.
/// \return Считанное число.
int CycleInputInt(int maxIntLength,
                  bool(* pChecker)(int),
                  char* formatToOutput,
                  ...);

/// Пытается считать число из строки.
///
/// \param string Строка, из которой считывается число.
/// \param pResult Указатель, куда записывается результат.
/// \return Истина если удалось считать, ложб если не удалось.
bool TryParseInt(char* string, int* pResult);

/// Считывает целое число из строки. Если удалось считать, инкрементируется
/// счётчик по указателю pSuccessfulCount.
///
/// \param string Строка, из которой считывается число.
/// \param pSuccessfulCount Указатель на счётчик успешных считываний.
/// \return Считанное число. 0, если не удалось считать.
int ParseInt(char* string, int* pSuccessfulCount);

#endif //UTILS_H
